generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_entity {
  id                       Int                         @id(map: "PK_b482dad15becff9a89ad707dcbe") @default(autoincrement())
  accountURL               String                      @db.VarChar
  enabled                  account_entity_enabled_enum @default(TRUE)
  account_type_id          Int?                        @default(1)
  account_category_id      Int?                        @default(3)
  main_entity_id           Int?
  account_category         account_category?           @relation(fields: [account_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_entity_account_category")
  account_type             account_type?               @relation(fields: [account_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_entity_account_type")
  main_entity              main_entity?                @relation(fields: [main_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_entity_main_entity")
  facebook_account_history facebook_account_history[]
  facebook_user_account    facebook_user_account?
  history_entity           history_entity[]
  instagram_user_account   instagram_user_account?
  overall_account_analysis overall_account_analysis?

  @@index([account_category_id], map: "idx_account_entity_account_category_id")
  @@index([account_type_id], map: "idx_account_entity_account_type_id")
  @@index([main_entity_id], map: "idx_account_entity_main_entity")
  @@index([account_category_id], map: "idx_account_entity_category")
  @@index([enabled, account_category_id, id, accountURL], map: "idx_account_entity_complex")
  @@index([enabled, account_category_id], map: "idx_account_entity_enabled_category")
  @@index([id], map: "idx_account_entity_id")
  @@index([account_category_id, enabled], map: "idx_account_entity_category_enabled")
}

model avoid_actions {
  id               Int            @id @default(autoincrement())
  post_analysis_id Int?
  avoid_action     String?
  createdat        DateTime?      @default(now()) @db.Timestamp(6)
  updatedat        DateTime?      @default(now()) @db.Timestamp(6)
  post_analysis    post_analysis? @relation(fields: [post_analysis_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model comment_analysis {
  id                Int             @id @default(autoincrement())
  comment_entity_id Int?            @unique(map: "unique_comment_entity_id")
  post_id           Int?
  topic             String?
  emotion           String?
  request           String?
  analyzedat        DateTime?       @default(now()) @db.Timestamp(6)
  updatedat         DateTime?       @default(now()) @db.Timestamp(6)
  comment_entity    comment_entity? @relation(fields: [comment_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instagram_post    instagram_post? @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model comment_entity {
  id                   Int               @id(map: "PK_5a439a16c76d63e046765cdb84f") @default(autoincrement())
  commentOwnerName     String            @db.VarChar
  comment              String            @db.VarChar
  likesOfComment       Int?              @default(0)
  scrapDate            DateTime          @default(now()) @db.Timestamp(6)
  commentDate          DateTime?         @default(now()) @db.Timestamptz(6)
  originalCommentId    Int?
  postId               Int?
  instagramid          String?           @db.VarChar
  comment_analysis     comment_analysis?
  instagram_post       instagram_post?   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8149ef6edc077bb121ae704e3a8")
  comment_entity       comment_entity?   @relation("comment_entityTocomment_entity", fields: [originalCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8a23f564cb621e0a80e85379957")
  other_comment_entity comment_entity[]  @relation("comment_entityTocomment_entity")
}

model history_entity {
  id             Int             @id(map: "PK_bcbd5ec0cdfba7c10e14f068b54") @default(autoincrement())
  numberOfPosts  Int             @default(0)
  followers      Int             @default(0)
  following      Int             @default(0)
  userName       String          @db.VarChar
  scrapDate      DateTime        @db.Timestamp(6)
  accountId      Int?
  account_entity account_entity? @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f343483ade9434864a0adf5be17")

  @@index([accountId, scrapDate(sort: Desc)], map: "idx_history_entity_account_date")
  @@index([accountId, scrapDate(sort: Desc)], map: "idx_history_entity_account_id")
}

/// This model contains an index with non-default null sort order and requires additional setup for migrations. Visit https://pris.ly/d/default-index-null-ordering for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model instagram_post {
  id                     Int                      @id(map: "PK_a0946a290d49ebb27c7684b956d") @default(autoincrement())
  media                  String
  title                  String                   @db.VarChar
  numberOfLikes          Int?
  numberOfComments       Int?
  scrapDate              DateTime                 @default(now()) @db.Timestamp(6)
  postDate               DateTime                 @default(now()) @db.Timestamptz(6)
  type                   instagram_post_type_enum @default(POST)
  accountId              Int?
  link                   String?                  @unique(map: "unique_instagram_post_link")
  artificialLikes        Boolean?                 @default(false)
  numberOfViews          Int?
  comment_analysis       comment_analysis[]
  comment_entity         comment_entity[]
  instagram_user_account instagram_user_account?  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_aa9e241c18cc32024858f02cfb6")
  post_analysis          post_analysis?

  @@index([scrapDate, accountId, numberOfLikes, numberOfComments], map: "idx_instagram_post_date_range")
  @@index([scrapDate, numberOfLikes(sort: Desc), numberOfComments(sort: Desc)], map: "idx_instagram_post_performance")
  @@index([scrapDate(sort: Desc)], map: "idx_instagram_post_scrap_date_desc")
  @@index([accountId, postDate], map: "idx_instagram_post_account_date")
  @@index([accountId, postDate, id, media, title, numberOfLikes, numberOfComments, type, link], map: "idx_instagram_post_full_analysis")
  @@index([postDate], map: "idx_instagram_post_post_date")
  @@index([type, postDate(sort: Desc)], map: "idx_instagram_post_type_date")
  @@index([accountId, postDate, numberOfLikes, numberOfComments], map: "idx_instagram_post_with_analysis")
  @@index([accountId, postDate(sort: Desc)], map: "idx_instagram_post_account_group")
  @@index([numberOfComments(sort: Desc)], map: "idx_instagram_post_comments")
  @@index([postDate(sort: Desc), accountId, id, numberOfLikes, numberOfComments], map: "idx_instagram_post_date_account_analysis")
  @@index([numberOfLikes(sort: Desc)], map: "idx_instagram_post_likes")
  @@index([numberOfViews], map: "idx_instagram_post_number_of_views")
  @@index([type], map: "idx_instagram_post_type")
}

/// This model contains an index with non-default null sort order and requires additional setup for migrations. Visit https://pris.ly/d/default-index-null-ordering for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model instagram_user_account {
  id                Int              @id(map: "PK_02fa9f168d5aeedbb1fee8f8aea") @default(autoincrement())
  username          String           @db.VarChar
  scrapDate         DateTime         @default(now()) @db.Timestamp(6)
  profilePictureUrl String?          @db.VarChar
  accountId         Int?             @unique(map: "REL_f487bf93ea0471fdff8042ad5e")
  numberOfPosts     Float            @default(0)
  followers         Float            @default(0)
  following         Float            @default(0)
  instagram_post    instagram_post[]
  account_entity    account_entity?  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f487bf93ea0471fdff8042ad5ed")

  @@index([scrapDate(sort: Desc)], map: "idx_instagram_user_account_scrap_date_desc")
  @@index([accountId], map: "idx_instagram_user_account_account_id")
  @@index([id], map: "idx_instagram_user_account_id")
}

model keep_doing_actions {
  id                Int            @id @default(autoincrement())
  post_analysis_id  Int?
  keep_doing_action String?
  createdat         DateTime?      @default(now()) @db.Timestamp(6)
  updatedat         DateTime?      @default(now()) @db.Timestamp(6)
  post_analysis     post_analysis? @relation(fields: [post_analysis_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model overall_account_analysis {
  id                 Int             @id @default(autoincrement())
  account_entity_id  Int?            @unique(map: "unique_account_entity_id")
  postanaamount      Int?
  likesaverage       Decimal?        @db.Decimal
  commentaverage     Decimal?        @db.Decimal
  poscommentsaverage Decimal?        @db.Decimal
  negcommentsaverage Decimal?        @db.Decimal
  engagementrate     Decimal?        @db.Decimal
  createdat          DateTime?       @default(now()) @db.Timestamp(6)
  updatedat          DateTime?       @default(now()) @db.Timestamp(6)
  account_entity     account_entity? @relation(fields: [account_entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([account_entity_id], map: "idx_overall_account_analysis_account_id")
}

/// This model contains an index with non-default null sort order and requires additional setup for migrations. Visit https://pris.ly/d/default-index-null-ordering for more info.
model post_analysis {
  id                        Int                  @id @default(autoincrement())
  post_topic_id             Int?
  instagram_post_id         Int?                 @unique(map: "unique_instagram_post_id")
  post_date                 DateTime?            @db.Timestamp(6)
  comments_amount           BigInt?
  ammount_negative_comments Int?
  ammount_positive_comments Int?
  ammount_neutral_comments  Int?
  general_emotion           String?
  createdat                 DateTime?            @default(now()) @db.Timestamp(6)
  updatedat                 DateTime?            @default(now()) @db.Timestamp(6)
  post_engagement           Decimal?             @db.Decimal
  tags                      String?
  avoid_actions             avoid_actions[]
  keep_doing_actions        keep_doing_actions[]
  instagram_post            instagram_post?      @relation(fields: [instagram_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_topic                post_topic?          @relation(fields: [post_topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recommendations           recommendations[]

  @@index([instagram_post_id], map: "idx_post_analysis_instagram_post_id")
  @@index([post_engagement(sort: Desc)], map: "idx_post_analysis_engagement")
  @@index([post_topic_id], map: "idx_post_analysis_topic")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model post_topic {
  id                     Int                      @id @default(autoincrement())
  emoji                  String
  topic                  String
  description            String?
  createdat              DateTime?                @default(now()) @db.Timestamp(6)
  account_category_id    Int?                     @default(3)
  facebook_post_analysis facebook_post_analysis[]
  post_analysis          post_analysis[]
  account_category       account_category?        @relation(fields: [account_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_topic_account_category")

  @@index([account_category_id], map: "idx_post_topic_account_category_id")
  @@index([id], map: "idx_post_topic_id")
}

model recommendations {
  id               Int            @id @default(autoincrement())
  post_analysis_id Int?
  recommendation   String?
  createdat        DateTime?      @default(now()) @db.Timestamp(6)
  updatedat        DateTime?      @default(now()) @db.Timestamp(6)
  post_analysis    post_analysis? @relation(fields: [post_analysis_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model facebook_post {
  id                        Int                         @id @default(autoincrement())
  media                     String?
  title                     String?
  numberoflikes             Int?
  numberofshares            Int?
  numberofcomments          Int?
  scrapdate                 DateTime?                   @default(now()) @db.Timestamp(6)
  postdate                  DateTime                    @db.Timestamptz(6)
  type                      String?
  accountid                 Int?
  link                      String?
  facebookPostID            String?                     @unique
  facebook_comment_analysis facebook_comment_analysis[]
  facebook_comment_entity   facebook_comment_entity[]
  facebook_user_account     facebook_user_account?      @relation(fields: [accountid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_facebook_post_facebook_user_account")
  facebook_post_analysis    facebook_post_analysis?
}

model account_category {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(50)
  description    String?          @db.VarChar(255)
  createdat      DateTime?        @default(now()) @db.Timestamp(6)
  account_entity account_entity[]
  main_entity    main_entity[]
  post_topic     post_topic[]
}

model account_type {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(50)
  description    String?          @db.VarChar(255)
  createdat      DateTime?        @default(now()) @db.Timestamp(6)
  account_entity account_entity[]
}

model facebook_account_history {
  id              Int             @id @default(autoincrement())
  accountEntityID Int?
  scrap_date      DateTime        @db.Date
  username        String          @db.VarChar
  followers       Int
  likes           Int
  account_entity  account_entity? @relation(fields: [accountEntityID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model facebook_comment_analysis {
  id                      Int                      @id @default(autoincrement())
  topic                   String?
  emotion                 String?
  request                 String?
  analyzedAt              DateTime?                @default(dbgenerated("('now'::text)::date")) @db.Date
  updatedAt               DateTime?                @default(dbgenerated("('now'::text)::date")) @db.Date
  postID                  Int?
  commentID               Int?                     @unique
  facebook_comment_entity facebook_comment_entity? @relation(fields: [commentID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  facebook_post           facebook_post?           @relation(fields: [postID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model facebook_comment_entity {
  id                            Int                        @id @default(autoincrement())
  postID                        Int?
  primaryCommentID              Int?
  commentContent                String                     @db.VarChar
  commentOwnerUsername          String                     @db.VarChar
  likesOfComment                Int?
  scrap_date                    DateTime                   @default(dbgenerated("('now'::text)::date")) @db.Date
  comment_date                  DateTime                   @default(dbgenerated("('now'::text)::date")) @db.Date
  facebookCommentID             String?                    @unique
  facebook_comment_analysis     facebook_comment_analysis?
  facebook_post                 facebook_post?             @relation(fields: [postID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  facebook_comment_entity       facebook_comment_entity?   @relation("facebook_comment_entityTofacebook_comment_entity", fields: [primaryCommentID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_facebook_comment_entity facebook_comment_entity[]  @relation("facebook_comment_entityTofacebook_comment_entity")
}

model facebook_post_analysis {
  id                      Int            @id @default(autoincrement())
  post_topic_id           Int?
  commentsAmmount         Int?
  ammountNegativeComments Int?
  ammountPositiveComments Int?
  ammountNeutralComments  Int?
  generalEmotion          String?
  postEngagement          Float?
  createdAt               DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt               DateTime?      @default(now()) @db.Timestamp(6)
  tags                    String?
  postID                  Int?           @unique
  facebook_post           facebook_post? @relation(fields: [postID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_topic              post_topic?    @relation(fields: [post_topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model facebook_user_account {
  id                  Int             @id @default(autoincrement())
  accountEntityID     Int?            @unique
  name                String          @db.VarChar
  username            String          @db.VarChar
  likes               Int?
  followers           Int?
  profilePictureURL   String?
  publication_ammount Int?
  last_scrap_date     DateTime?       @db.Date
  facebook_post       facebook_post[]
  account_entity      account_entity? @relation(fields: [accountEntityID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model main_entity {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar
  description         String?
  account_category_id Int?
  createdat           DateTime?         @default(now()) @db.Timestamp(6)
  account_entity      account_entity[]
  account_category    account_category? @relation(fields: [account_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum instagram_post_type_enum {
  POST
  REEL
}

enum account_entity_enabled_enum {
  TRUE  @map("1")
  FALSE @map("0")
}

enum account_category_enum {
  POLITICS
  NEWS
  ALL
}

enum facebook_post_type_enum {
  POST
  REEL
}
